//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(Locale.init) ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)
  
  static func validate() throws {
    try intern.validate()
  }
  
  /// This `R.image` struct is generated, and contains static references to 15 images.
  struct image {
    /// Image `rank_icon_1`.
    static let rank_icon_1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "rank_icon_1")
    /// Image `rank_icon_2`.
    static let rank_icon_2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "rank_icon_2")
    /// Image `rank_icon_3`.
    static let rank_icon_3 = Rswift.ImageResource(bundle: R.hostingBundle, name: "rank_icon_3")
    /// Image `rank_icon_4`.
    static let rank_icon_4 = Rswift.ImageResource(bundle: R.hostingBundle, name: "rank_icon_4")
    /// Image `rank_icon_5`.
    static let rank_icon_5 = Rswift.ImageResource(bundle: R.hostingBundle, name: "rank_icon_5")
    /// Image `rank_icon_6`.
    static let rank_icon_6 = Rswift.ImageResource(bundle: R.hostingBundle, name: "rank_icon_6")
    /// Image `rank_icon_7`.
    static let rank_icon_7 = Rswift.ImageResource(bundle: R.hostingBundle, name: "rank_icon_7")
    /// Image `rank_icon_8`.
    static let rank_icon_8 = Rswift.ImageResource(bundle: R.hostingBundle, name: "rank_icon_8")
    /// Image `rank_star_1`.
    static let rank_star_1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "rank_star_1")
    /// Image `rank_star_2`.
    static let rank_star_2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "rank_star_2")
    /// Image `rank_star_3`.
    static let rank_star_3 = Rswift.ImageResource(bundle: R.hostingBundle, name: "rank_star_3")
    /// Image `rank_star_4`.
    static let rank_star_4 = Rswift.ImageResource(bundle: R.hostingBundle, name: "rank_star_4")
    /// Image `rank_star_5`.
    static let rank_star_5 = Rswift.ImageResource(bundle: R.hostingBundle, name: "rank_star_5")
    /// Image `rank_star_6`.
    static let rank_star_6 = Rswift.ImageResource(bundle: R.hostingBundle, name: "rank_star_6")
    /// Image `rank_star_7`.
    static let rank_star_7 = Rswift.ImageResource(bundle: R.hostingBundle, name: "rank_star_7")
    
    /// `UIImage(named: "rank_icon_1", bundle: ..., traitCollection: ...)`
    static func rank_icon_1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.rank_icon_1, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "rank_icon_2", bundle: ..., traitCollection: ...)`
    static func rank_icon_2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.rank_icon_2, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "rank_icon_3", bundle: ..., traitCollection: ...)`
    static func rank_icon_3(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.rank_icon_3, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "rank_icon_4", bundle: ..., traitCollection: ...)`
    static func rank_icon_4(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.rank_icon_4, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "rank_icon_5", bundle: ..., traitCollection: ...)`
    static func rank_icon_5(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.rank_icon_5, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "rank_icon_6", bundle: ..., traitCollection: ...)`
    static func rank_icon_6(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.rank_icon_6, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "rank_icon_7", bundle: ..., traitCollection: ...)`
    static func rank_icon_7(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.rank_icon_7, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "rank_icon_8", bundle: ..., traitCollection: ...)`
    static func rank_icon_8(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.rank_icon_8, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "rank_star_1", bundle: ..., traitCollection: ...)`
    static func rank_star_1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.rank_star_1, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "rank_star_2", bundle: ..., traitCollection: ...)`
    static func rank_star_2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.rank_star_2, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "rank_star_3", bundle: ..., traitCollection: ...)`
    static func rank_star_3(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.rank_star_3, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "rank_star_4", bundle: ..., traitCollection: ...)`
    static func rank_star_4(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.rank_star_4, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "rank_star_5", bundle: ..., traitCollection: ...)`
    static func rank_star_5(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.rank_star_5, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "rank_star_6", bundle: ..., traitCollection: ...)`
    static func rank_star_6(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.rank_star_6, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "rank_star_7", bundle: ..., traitCollection: ...)`
    static func rank_star_7(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.rank_star_7, compatibleWith: traitCollection)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.nib` struct is generated, and contains static references to 1 nibs.
  struct nib {
    /// Nib `PlayerCellTableViewCell`.
    static let playerCellTableViewCell = _R.nib._PlayerCellTableViewCell()
    
    /// `UINib(name: "PlayerCellTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.playerCellTableViewCell) instead")
    static func playerCellTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.playerCellTableViewCell)
    }
    
    static func playerCellTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PlayerCellTableViewCell? {
      return R.nib.playerCellTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PlayerCellTableViewCell
    }
    
    fileprivate init() {}
  }
  
  /// This `R.reuseIdentifier` struct is generated, and contains static references to 1 reuse identifiers.
  struct reuseIdentifier {
    /// Reuse identifier `playerTableCelId`.
    static let playerTableCelId: Rswift.ReuseIdentifier<PlayerCellTableViewCell> = Rswift.ReuseIdentifier(identifier: "playerTableCelId")
    
    fileprivate init() {}
  }
  
  /// This `R.storyboard` struct is generated, and contains static references to 3 storyboards.
  struct storyboard {
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `Matches`.
    static let matches = _R.storyboard.matches()
    /// Storyboard `Players`.
    static let players = _R.storyboard.players()
    
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    
    /// `UIStoryboard(name: "Matches", bundle: ...)`
    static func matches(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.matches)
    }
    
    /// `UIStoryboard(name: "Players", bundle: ...)`
    static func players(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.players)
    }
    
    fileprivate init() {}
  }
  
  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }
    
    fileprivate init() {}
  }
  
  fileprivate class Class {}
  
  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    try storyboard.validate()
  }
  
  struct nib {
    struct _PlayerCellTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = PlayerCellTableViewCell
      
      let bundle = R.hostingBundle
      let identifier = "playerTableCelId"
      let name = "PlayerCellTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PlayerCellTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PlayerCellTableViewCell
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      try launchScreen.validate()
      try matches.validate()
      try players.validate()
    }
    
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController
      
      let bundle = R.hostingBundle
      let name = "LaunchScreen"
      
      static func validate() throws {
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct matches: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let matchesID = StoryboardViewControllerResource<MatchesVC>(identifier: "MatchesID")
      let name = "Matches"
      
      func matchesID(_: Void = ()) -> MatchesVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: matchesID)
      }
      
      static func validate() throws {
        if #available(iOS 11.0, *) {
        }
        if _R.storyboard.matches().matchesID() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'matchesID' could not be loaded from storyboard 'Matches' as 'MatchesVC'.") }
      }
      
      fileprivate init() {}
    }
    
    struct players: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = FavoritePlayersVC
      
      let bundle = R.hostingBundle
      let name = "Players"
      let playerDetailsID = StoryboardViewControllerResource<PlayerDetailsVC>(identifier: "PlayerDetailsID")
      let playersID = StoryboardViewControllerResource<FavoritePlayersVC>(identifier: "PlayersID")
      let searchPlayerID = StoryboardViewControllerResource<SearchPlayerVC>(identifier: "SearchPlayerID")
      
      func playerDetailsID(_: Void = ()) -> PlayerDetailsVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: playerDetailsID)
      }
      
      func playersID(_: Void = ()) -> FavoritePlayersVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: playersID)
      }
      
      func searchPlayerID(_: Void = ()) -> SearchPlayerVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: searchPlayerID)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "person.3", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'person.3' is used in storyboard 'Players', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
        if _R.storyboard.players().playerDetailsID() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'playerDetailsID' could not be loaded from storyboard 'Players' as 'PlayerDetailsVC'.") }
        if _R.storyboard.players().playersID() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'playersID' could not be loaded from storyboard 'Players' as 'FavoritePlayersVC'.") }
        if _R.storyboard.players().searchPlayerID() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'searchPlayerID' could not be loaded from storyboard 'Players' as 'SearchPlayerVC'.") }
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate init() {}
}
