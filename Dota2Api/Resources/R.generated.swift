//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(Locale.init) ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)
  
  static func validate() throws {
    try intern.validate()
  }
  
  /// This `R.nib` struct is generated, and contains static references to 1 nibs.
  struct nib {
    /// Nib `PlayerCellCollectionViewCell`.
    static let playerCellCollectionViewCell = _R.nib._PlayerCellCollectionViewCell()
    
    /// `UINib(name: "PlayerCellCollectionViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.playerCellCollectionViewCell) instead")
    static func playerCellCollectionViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.playerCellCollectionViewCell)
    }
    
    static func playerCellCollectionViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PlayerCellCollectionViewCell? {
      return R.nib.playerCellCollectionViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PlayerCellCollectionViewCell
    }
    
    fileprivate init() {}
  }
  
  /// This `R.reuseIdentifier` struct is generated, and contains static references to 1 reuse identifiers.
  struct reuseIdentifier {
    /// Reuse identifier `PlayerCellID`.
    static let playerCellID: Rswift.ReuseIdentifier<PlayerCellCollectionViewCell> = Rswift.ReuseIdentifier(identifier: "PlayerCellID")
    
    fileprivate init() {}
  }
  
  /// This `R.storyboard` struct is generated, and contains static references to 4 storyboards.
  struct storyboard {
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `Matches`.
    static let matches = _R.storyboard.matches()
    /// Storyboard `Players`.
    static let players = _R.storyboard.players()
    /// Storyboard `TabBar`.
    static let tabBar = _R.storyboard.tabBar()
    
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    
    /// `UIStoryboard(name: "Matches", bundle: ...)`
    static func matches(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.matches)
    }
    
    /// `UIStoryboard(name: "Players", bundle: ...)`
    static func players(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.players)
    }
    
    /// `UIStoryboard(name: "TabBar", bundle: ...)`
    static func tabBar(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.tabBar)
    }
    
    fileprivate init() {}
  }
  
  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }
    
    fileprivate init() {}
  }
  
  fileprivate class Class {}
  
  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    try storyboard.validate()
  }
  
  struct nib {
    struct _PlayerCellCollectionViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = PlayerCellCollectionViewCell
      
      let bundle = R.hostingBundle
      let identifier = "PlayerCellID"
      let name = "PlayerCellCollectionViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PlayerCellCollectionViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PlayerCellCollectionViewCell
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      try launchScreen.validate()
      try matches.validate()
      try players.validate()
      try tabBar.validate()
    }
    
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController
      
      let bundle = R.hostingBundle
      let name = "LaunchScreen"
      
      static func validate() throws {
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct matches: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let matchesID = StoryboardViewControllerResource<MatchesVC>(identifier: "MatchesID")
      let name = "Matches"
      
      func matchesID(_: Void = ()) -> MatchesVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: matchesID)
      }
      
      static func validate() throws {
        if #available(iOS 11.0, *) {
        }
        if _R.storyboard.matches().matchesID() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'matchesID' could not be loaded from storyboard 'Matches' as 'MatchesVC'.") }
      }
      
      fileprivate init() {}
    }
    
    struct players: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "Players"
      let playersID = StoryboardViewControllerResource<PlayersVC>(identifier: "PlayersID")
      let searchPlayerID = StoryboardViewControllerResource<SearchPlayerVC>(identifier: "SearchPlayerID")
      
      func playersID(_: Void = ()) -> PlayersVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: playersID)
      }
      
      func searchPlayerID(_: Void = ()) -> SearchPlayerVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: searchPlayerID)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "person.3", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'person.3' is used in storyboard 'Players', but couldn't be loaded.") }
        if UIKit.UIImage(named: "plus", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'plus' is used in storyboard 'Players', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
        if _R.storyboard.players().playersID() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'playersID' could not be loaded from storyboard 'Players' as 'PlayersVC'.") }
        if _R.storyboard.players().searchPlayerID() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'searchPlayerID' could not be loaded from storyboard 'Players' as 'SearchPlayerVC'.") }
      }
      
      fileprivate init() {}
    }
    
    struct tabBar: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UINavigationController
      
      let bundle = R.hostingBundle
      let name = "TabBar"
      
      static func validate() throws {
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate init() {}
}
